Para desarrollar esta aplicación en Java utilizando JDBC, MySQL y siguiendo las operaciones CRUD, organizaremos el código en diferentes archivos para mantener una estructura limpia y modular. La estructura de archivos será la siguiente:

Database Connection

DatabaseConnection.java
Models

Especialidad.java
Medico.java
Paciente.java
Cita.java
CRUD Operations

EspecialidadDAO.java
MedicoDAO.java
PacienteDAO.java
CitaDAO.java
Main Application

HospitalManagementApp.java
Vamos a comenzar con la implementación de cada una de estas partes.

1. Database Connection

// DatabaseConnection.java
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DatabaseConnection {
    private static final String URL = "jdbc:mysql://localhost:3306/hospital_db";
    private static final String USER = "root";
    private static final String PASSWORD = "password";

    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }
}


2. Models
Especialidad.java


// Especialidad.java
public class Especialidad {
    private int idEspecialidad;
    private String nombre;
    private String descripcion;

    // Getters and Setters
    // Constructor
    // toString method
}


Medico.java
// Medico.java
public class Medico {
    private int idMedico;
    private String nombre;
    private String apellidos;
    private int idEspecialidad;

    // Getters and Setters
    // Constructor
    // toString method
}




Paciente.java
// Paciente.java
public class Paciente {
    private int idPaciente;
    private String nombre;
    private String apellidos;
    private Date fechaNacimiento;
    private String documentoIdentidad;

    // Getters and Setters
    // Constructor
    // toString method
}




Memoria actualizada
Para desarrollar esta aplicación en Java utilizando JDBC, MySQL y siguiendo las operaciones CRUD, organizaremos el código en diferentes archivos para mantener una estructura limpia y modular. La estructura de archivos será la siguiente:

Database Connection

DatabaseConnection.java
Models

Especialidad.java
Medico.java
Paciente.java
Cita.java
CRUD Operations

EspecialidadDAO.java
MedicoDAO.java
PacienteDAO.java
CitaDAO.java
Main Application

HospitalManagementApp.java
Vamos a comenzar con la implementación de cada una de estas partes.

1. Database Connection
java
Copiar código
// DatabaseConnection.java
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DatabaseConnection {
    private static final String URL = "jdbc:mysql://localhost:3306/hospital_db";
    private static final String USER = "root";
    private static final String PASSWORD = "password";

    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }
}
2. Models
Especialidad.java
java
Copiar código
// Especialidad.java
public class Especialidad {
    private int idEspecialidad;
    private String nombre;
    private String descripcion;

    // Getters and Setters
    // Constructor
    // toString method
}
Medico.java
java
Copiar código
// Medico.java
public class Medico {
    private int idMedico;
    private String nombre;
    private String apellidos;
    private int idEspecialidad;

    // Getters and Setters
    // Constructor
    // toString method
}
Paciente.java
java
Copiar código
// Paciente.java
public class Paciente {
    private int idPaciente;
    private String nombre;
    private String apellidos;
    private Date fechaNacimiento;
    private String documentoIdentidad;

    // Getters and Setters
    // Constructor
    // toString method
}
Cita.java
// Cita.java
public class Cita {
    private int idCita;
    private int idPaciente;
    private int idMedico;
    private Date fechaCita;
    private Time horaCita;
    private String motivo;

    // Getters and Setters
    // Constructor
    // toString method
}



3. CRUD Operations
EspecialidadDAO.java
java
Copiar código
// EspecialidadDAO.java
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class EspecialidadDAO {
    public void addEspecialidad(Especialidad especialidad) throws SQLException {
        String query = "INSERT INTO Especialidad (nombre, descripcion) VALUES (?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, especialidad.getNombre());
            stmt.setString(2, especialidad.getDescripcion());
            stmt.executeUpdate();
        }
    }

    public Especialidad getEspecialidadById(int id) throws SQLException {
        String query = "SELECT * FROM Especialidad WHERE id_especialidad = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, id);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return new Especialidad(rs.getInt("id_especialidad"), rs.getString("nombre"), rs.getString("descripcion"));
            }
        }
        return null;
    }

    public List<Especialidad> getAllEspecialidades() throws SQLException {
        String query = "SELECT * FROM Especialidad";
        List<Especialidad> especialidades = new ArrayList<>();
        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                especialidades.add(new Especialidad(rs.getInt("id_especialidad"), rs.getString("nombre"), rs.getString("descripcion")));
            }
        }
        return especialidades;
    }

    public void updateEspecialidad(Especialidad especialidad) throws SQLException {
        String query = "UPDATE Especialidad SET nombre = ?, descripcion = ? WHERE id_especialidad = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, especialidad.getNombre());
            stmt.setString(2, especialidad.getDescripcion());
            stmt.setInt(3, especialidad.getIdEspecialidad());
            stmt.executeUpdate();
        }
    }

    public void deleteEspecialidad(int id) throws SQLException {
        String query = "DELETE FROM Especialidad WHERE id_especialidad = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, id);
            stmt.executeUpdate();
        }
    }
}



MedicoDAO.java
java
Copiar código
// MedicoDAO.java
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class MedicoDAO {
    public void addMedico(Medico medico) throws SQLException {
        String query = "INSERT INTO Medico (nombre, apellidos, id_especialidad) VALUES (?, ?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, medico.getNombre());
            stmt.setString(2, medico.getApellidos());
            stmt.setInt(3, medico.getIdEspecialidad());
            stmt.executeUpdate();
        }
    }

    public Medico getMedicoById(int id) throws SQLException {
        String query = "SELECT * FROM Medico WHERE id_medico = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, id);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return new Medico(rs.getInt("id_medico"), rs.getString("nombre"), rs.getString("apellidos"), rs.getInt("id_especialidad"));
            }
        }
        return null;
    }

    public List<Medico> getAllMedicos() throws SQLException {
        String query = "SELECT * FROM Medico";
        List<Medico> medicos = new ArrayList<>();
        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                medicos.add(new Medico(rs.getInt("id_medico"), rs.getString("nombre"), rs.getString("apellidos"), rs.getInt("id_especialidad")));
            }
        }
        return medicos;
    }

    public void updateMedico(Medico medico) throws SQLException {
        String query = "UPDATE Medico SET nombre = ?, apellidos = ?, id_especialidad = ? WHERE id_medico = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, medico.getNombre());
            stmt.setString(2, medico.getApellidos());
            stmt.setInt(3, medico.getIdEspecialidad());
            stmt.setInt(4, medico.getIdMedico());
            stmt.executeUpdate();
        }
    }

    public void deleteMedico(int id) throws SQLException {
        String query = "DELETE FROM Medico WHERE id_medico = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, id);
            stmt.executeUpdate();
        }
    }
}




PacienteDAO.java
java
Copiar código
// PacienteDAO.java
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class PacienteDAO {
    public void addPaciente(Paciente paciente) throws SQLException {
        String query = "INSERT INTO Paciente (nombre, apellidos, fecha_nacimiento, documento_identidad) VALUES (?, ?, ?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, paciente.getNombre());
            stmt.setString(2, paciente.getApellidos());
            stmt.setDate(3, new java.sql.Date(paciente.getFechaNacimiento().getTime()));
            stmt.setString(4, paciente.getDocumentoIdentidad());
            stmt.executeUpdate();
        }
    }

    public Paciente getPacienteById(int id) throws SQLException {
        String query = "SELECT * FROM Paciente WHERE id_paciente = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, id);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return new Paciente(rs.getInt("id_paciente"), rs.getString("nombre"), rs.getString("apellidos"), rs.getDate("fecha_nacimiento"), rs.getString("documento_identidad"));
            }
        }
        return null;
    }

    public List<Paciente> getAllPacientes() throws SQLException {
        String query = "SELECT * FROM Paciente";
        List<Paciente> pacientes = new ArrayList<>();
        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                pacientes.add(new Paciente(rs.getInt("id_paciente"), rs.getString("nombre"), rs.getString("apellidos"), rs.getDate("fecha_nacimiento"), rs.get



1. Creación de la Base de Datos en MySQL
Primero, crea la base de datos y las tablas necesarias ejecutando los siguientes comandos SQL:

sql
Copiar código
-- Crear la base de datos
CREATE DATABASE hospital_db;

-- Usar la base de datos
USE hospital_db;

-- Crear la tabla Especialidad
CREATE TABLE Especialidad (
    id_especialidad INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    descripcion TEXT
);

-- Crear la tabla Medico
CREATE TABLE Medico (
    id_medico INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    apellidos VARCHAR(255) NOT NULL,
    id_especialidad INT,
    FOREIGN KEY (id_especialidad) REFERENCES Especialidad(id_especialidad)
);

-- Crear la tabla Paciente
CREATE TABLE Paciente (
    id_paciente INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    apellidos VARCHAR(255) NOT NULL,
    fecha_nacimiento DATE,
    documento_identidad VARCHAR(50) NOT NULL
);

-- Crear la tabla Cita
CREATE TABLE Cita (
    id_cita INT AUTO_INCREMENT PRIMARY KEY,
    id_paciente INT,
    id_medico INT,
    fecha_cita DATE,
    hora_cita TIME,
    motivo TEXT,
    FOREIGN KEY (id_paciente) REFERENCES Paciente(id_paciente),
    FOREIGN KEY (id_medico) REFERENCES Medico(id_medico)
);





2. Ajuste del DAO de Paciente
La clase PacienteDAO estaba incompleta, aquí está la implementación completa:

java
Copiar código
// PacienteDAO.java
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class PacienteDAO {
    public void addPaciente(Paciente paciente) throws SQLException {
        String query = "INSERT INTO Paciente (nombre, apellidos, fecha_nacimiento, documento_identidad) VALUES (?, ?, ?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, paciente.getNombre());
            stmt.setString(2, paciente.getApellidos());
            stmt.setDate(3, new java.sql.Date(paciente.getFechaNacimiento().getTime()));
            stmt.setString(4, paciente.getDocumentoIdentidad());
            stmt.executeUpdate();
        }
    }

    public Paciente getPacienteById(int id) throws SQLException {
        String query = "SELECT * FROM Paciente WHERE id_paciente = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, id);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return new Paciente(rs.getInt("id_paciente"), rs.getString("nombre"), rs.getString("apellidos"), rs.getDate("fecha_nacimiento"), rs.getString("documento_identidad"));
            }
        }
        return null;
    }

    public List<Paciente> getAllPacientes() throws SQLException {
        String query = "SELECT * FROM Paciente";
        List<Paciente> pacientes = new ArrayList<>();
        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                pacientes.add(new Paciente(rs.getInt("id_paciente"), rs.getString("nombre"), rs.getString("apellidos"), rs.getDate("fecha_nacimiento"), rs.getString("documento_identidad")));
            }
        }
        return pacientes;
    }

    public void updatePaciente(Paciente paciente) throws SQLException {
        String query = "UPDATE Paciente SET nombre = ?, apellidos = ?, fecha_nacimiento = ?, documento_identidad = ? WHERE id_paciente = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, paciente.getNombre());
            stmt.setString(2, paciente.getApellidos());
            stmt.setDate(3, new java.sql.Date(paciente.getFechaNacimiento().getTime()));
            stmt.setString(4, paciente.getDocumentoIdentidad());
            stmt.setInt(5, paciente.getIdPaciente());
            stmt.executeUpdate();
        }
    }

    public void deletePaciente(int id) throws SQLException {
        String query = "DELETE FROM Paciente WHERE id_paciente = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, id);
            stmt.executeUpdate();
        }
    }
}







Para permitir que el usuario interactúe con el programa desde el main, crearemos un menú simple en la consola. Este menú permitirá al usuario seleccionar las operaciones CRUD para cada entidad (Especialidad, Medico, Paciente y Cita).

HospitalManagementApp.java
java
Copiar código
// HospitalManagementApp.java
import java.sql.SQLException;
import java.util.Date;
import java.util.List;
import java.util.Scanner;

public class HospitalManagementApp {
    private static Scanner scanner = new Scanner(System.in);
    private static EspecialidadDAO especialidadDAO = new EspecialidadDAO();
    private static MedicoDAO medicoDAO = new MedicoDAO();
    private static PacienteDAO pacienteDAO = new PacienteDAO();
    private static CitaDAO citaDAO = new CitaDAO();

    public static void main(String[] args) {
        while (true) {
            System.out.println("=== Gestión de Hospital ===");
            System.out.println("1. Gestionar Especialidades");
            System.out.println("2. Gestionar Médicos");
            System.out.println("3. Gestionar Pacientes");
            System.out.println("4. Gestionar Citas");
            System.out.println("5. Salir");
            System.out.print("Seleccione una opción: ");
            int choice = Integer.parseInt(scanner.nextLine());

            switch (choice) {
                case 1:
                    gestionarEspecialidades();
                    break;
                case 2:
                    gestionarMedicos();
                    break;
                case 3:
                    gestionarPacientes();
                    break;
                case 4:
                    gestionarCitas();
                    break;
                case 5:
                    System.out.println("Saliendo del programa...");
                    return;
                default:
                    System.out.println("Opción no válida. Inténtelo de nuevo.");
            }
        }
    }

    private static void gestionarEspecialidades() {
        while (true) {
            System.out.println("=== Gestión de Especialidades ===");
            System.out.println("1. Añadir Especialidad");
            System.out.println("2. Ver Especialidad");
            System.out.println("3. Ver Todas las Especialidades");
            System.out.println("4. Actualizar Especialidad");
            System.out.println("5. Eliminar Especialidad");
            System.out.println("6. Volver al menú principal");
            System.out.print("Seleccione una opción: ");
            int choice = Integer.parseInt(scanner.nextLine());

            try {
                switch (choice) {
                    case 1:
                        addEspecialidad();
                        break;
                    case 2:
                        getEspecialidad();
                        break;
                    case 3:
                        getAllEspecialidades();
                        break;
                    case 4:
                        updateEspecialidad();
                        break;
                    case 5:
                        deleteEspecialidad();
                        break;
                    case 6:
                        return;
                    default:
                        System.out.println("Opción no válida. Inténtelo de nuevo.");
                }
            } catch (SQLException e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }

    private static void gestionarMedicos() {
        while (true) {
            System.out.println("=== Gestión de Médicos ===");
            System.out.println("1. Añadir Médico");
            System.out.println("2. Ver Médico");
            System.out.println("3. Ver Todos los Médicos");
            System.out.println("4. Actualizar Médico");
            System.out.println("5. Eliminar Médico");
            System.out.println("6. Volver al menú principal");
            System.out.print("Seleccione una opción: ");
            int choice = Integer.parseInt(scanner.nextLine());

            try {
                switch (choice) {
                    case 1:
                        addMedico();
                        break;
                    case 2:
                        getMedico();
                        break;
                    case 3:
                        getAllMedicos();
                        break;
                    case 4:
                        updateMedico();
                        break;
                    case 5:
                        deleteMedico();
                        break;
                    case 6:
                        return;
                    default:
                        System.out.println("Opción no válida. Inténtelo de nuevo.");
                }
            } catch (SQLException e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }

    private static void gestionarPacientes() {
        while (true) {
            System.out.println("=== Gestión de Pacientes ===");
            System.out.println("1. Añadir Paciente");
            System.out.println("2. Ver Paciente");
            System.out.println("3. Ver Todos los Pacientes");
            System.out.println("4. Actualizar Paciente");
            System.out.println("5. Eliminar Paciente");
            System.out.println("6. Volver al menú principal");
            System.out.print("Seleccione una opción: ");
            int choice = Integer.parseInt(scanner.nextLine());

            try {
                switch (choice) {
                    case 1:
                        addPaciente();
                        break;
                    case 2:
                        getPaciente();
                        break;
                    case 3:
                        getAllPacientes();
                        break;
                    case 4:
                        updatePaciente();
                        break;
                    case 5:
                        deletePaciente();
                        break;
                    case 6:
                        return;
                    default:
                        System.out.println("Opción no válida. Inténtelo de nuevo.");
                }
            } catch (SQLException e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }

    private static void gestionarCitas() {
        while (true) {
            System.out.println("=== Gestión de Citas ===");
            System.out.println("1. Añadir Cita");
            System.out.println("2. Ver Cita");
            System.out.println("3. Ver Todas las Citas");
            System.out.println("4. Actualizar Cita");
            System.out.println("5. Eliminar Cita");
            System.out.println("6. Volver al menú principal");
            System.out.print("Seleccione una opción: ");
            int choice = Integer.parseInt(scanner.nextLine());

            try {
                switch (choice) {
                    case 1:
                        addCita();
                        break;
                    case 2:
                        getCita();
                        break;
                    case 3:
                        getAllCitas();
                        break;
                    case 4:
                        updateCita();
                        break;
                    case 5:
                        deleteCita();
                        break;
                    case 6:
                        return;
                    default:
                        System.out.println("Opción no válida. Inténtelo de nuevo.");
                }
            } catch (SQLException e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }

    // Métodos para gestionar Especialidad
    private static void addEspecialidad() throws SQLException {
        System.out.print("Nombre: ");
        String nombre = scanner.nextLine();
        System.out.print("Descripción: ");
        String descripcion = scanner.nextLine();

        Especialidad especialidad = new Especialidad();
        especialidad.setNombre(nombre);
        especialidad.setDescripcion(descripcion);

        especialidadDAO.addEspecialidad(especialidad);
        System.out.println("Especialidad añadida exitosamente.");
    }

    private static void getEspecialidad() throws SQLException {
        System.out.print("ID de Especialidad: ");
        int id = Integer.parseInt(scanner.nextLine());

        Especialidad especialidad = especialidadDAO.getEspecialidadById(id);
        if (especialidad != null) {
            System.out.println(especialidad);
        } else {
            System.out.println("Especialidad no encontrada.");
        }
    }

    private static void getAllEspecialidades() throws SQLException {
        List<Especialidad> especialidades = especialidadDAO.getAllEspecialidades();
        for (Especialidad especialidad : especialidades) {
            System.out.println(especialidad);
        }
    }

    private static void updateEspecialidad() throws SQLException {
        System.out.print("ID de Especialidad: ");
        int id = Integer.parseInt(scanner.nextLine());

        Especialidad especialidad = especialidadDAO.getEspecialidadById(id);
        if (especialidad == null) {
            System.out.println("Especialidad no encontrada.");
            return;
        }

        System.out.print("Nuevo Nombre (actual: " + especialidad.getNombre() + "): ");
        String nombre = scanner.nextLine();
        System.out.print("Nueva Descripción (actual: " + especialidad.getDescripcion() + "): ");
        String descripcion = scanner.nextLine();

        especialidad.setNombre(nombre);
        especialidad.setDescripcion(descripcion);

        especialidadDAO.updateEspecialidad(especialidad);
        System.out.println("Especialidad actualizada exitosamente.");
    }

    private static void deleteEspecialidad() throws SQLException {
        System.out.print("ID de Especialidad: ");
        int id = Integer.parseInt(scanner.nextLine());

        especialidadDAO.deleteEspecialidad(id);
        System.out.println("Especialidad eliminada exitosamente.");
    }

    // Métodos para gestionar Médico
    private static void addMedico() throws SQLException {
        System.out.print("Nombre: ");
        String nombre = scanner.nextLine();
        System.out.print("Apellidos: ");
        String apellidos = scanner.nextLine();
        System.out.print("ID de Especialidad: ");
        int idEspecialidad = Integer.parseInt(scanner.nextLine());

        Medico medico = new Medico();
        medico.setNombre(nombre);
        medico.setApellidos(apellidos);
        medico.setIdEspecialidad(idEspecialidad);

        medicoDAO.addMedico(medico);
        System.out.println("Médico añadido exitosamente.");
    }

    private static void getMedico() throws SQLException {
        System.out.print("ID de Médico: ");
        int id = Integer.parseInt(scanner.nextLine());

        Medico medico = medicoDAO.getMedicoById(id);
        if (medico != null) {
            System.out.println(medico);
        } else {
            System.out.println("Médico no encontrado.");
        }
    }

    private static void getAllMedicos() throws SQLException {
        List<Medico> medicos = medicoDAO.getAllMedicos();
        for (Medico medico : medicos) {
            System.out.println(medico);
        }
    }

    private static void updateMedico() throws SQLException {
        System.out.print("ID de Médico: ");
        int id = Integer.parseInt(scanner.nextLine());

        Medico medico = medicoDAO.getMedicoById(id);
        if (medico == null) {
            System.out.println("Médico no encontrado.");
            return;
        }

        System.out.print("Nuevo Nombre (actual: " + medico.getNombre() + "): ");
        String nombre = scanner.nextLine();
        System.out.print("Nuevos Apellidos (actual: " + medico.getApellidos() + "): ");
        String apellidos = scanner.nextLine();
        System.out.print("Nueva Especialidad (actual: " + medico.getIdEspecialidad() + "): ");
        int idEspecialidad = Integer.parseInt(scanner.nextLine());

        medico.setNombre(nombre);
        medico.setApellidos(apellidos);
        medico.setIdEspecialidad(idEspecialidad);

        medicoDAO.updateMedico(medico);
        System.out.println("Médico actualizado exitosamente.");
    }

    private static void deleteMedico() throws SQLException {
        System.out.print("ID de Médico: ");
        int id = Integer.parseInt(scanner.nextLine());

        medicoDAO.deleteMedico(id);
        System.out.println("Médico eliminado exitosamente.");
    }

    // Métodos para gestionar Paciente
    private static void addPaciente() throws SQLException {
        System.out.print("Nombre: ");
        String nombre = scanner.nextLine();
        System.out.print("Apellidos: ");
        String apellidos = scanner.nextLine();
        System.out.print("Fecha de Nacimiento (yyyy-mm-dd): ");
        Date fechaNacimiento = Date.valueOf(scanner.nextLine());
        System.out.print("Documento de Identidad: ");
        String documentoIdentidad = scanner.nextLine();

        Paciente paciente = new Paciente();
        paciente.setNombre(nombre);
        paciente.setApellidos(apellidos);
        paciente.setFechaNacimiento(fechaNacimiento);
        paciente.setDocumentoIdentidad(documentoIdentidad);

        pacienteDAO.addPaciente(paciente);
        System.out.println("Paciente añadido exitosamente.");
    }

    private static void getPaciente() throws SQLException {
        System.out.print("ID de Paciente: ");
        int id = Integer.parseInt(scanner.nextLine());

        Paciente paciente = pacienteDAO.getPacienteById(id);
        if (paciente != null) {
            System.out.println(paciente);
        } else {
            System.out.println("Paciente no encontrado.");
        }
    }

    private static void getAllPacientes() throws SQLException {
        List<Paciente> pacientes = pacienteDAO.getAllPacientes();
        for (Paciente paciente : pacientes) {
            System.out.println(paciente);
        }
    }

    private static void updatePaciente() throws SQLException {
        System.out.print("ID de Paciente: ");
        int id = Integer.parseInt(scanner.nextLine());

        Paciente paciente = pacienteDAO.getPacienteById(id);
        if (paciente == null) {
            System.out.println("Paciente no encontrado.");
            return;
        }

        System.out.print("Nuevo Nombre (actual: " + paciente.getNombre() + "): ");
        String nombre = scanner.nextLine();
        System.out.print("Nuevos Apellidos (actual: " + paciente.getApellidos() + "): ");
        String apellidos = scanner.nextLine();
        System.out.print("Nueva Fecha de Nacimiento (actual: " + paciente.getFechaNacimiento() + "): ");
        Date fechaNacimiento = Date.valueOf(scanner.nextLine());
        System.out.print("Nuevo Documento de Identidad (actual: " + paciente.getDocumentoIdentidad() + "): ");
        String documentoIdentidad = scanner.nextLine();

        paciente.setNombre(nombre);
        paciente.setApellidos(apellidos);
        paciente.setFechaNacimiento(fechaNacimiento);
        paciente.setDocumentoIdentidad(documentoIdentidad);

        pacienteDAO.updatePaciente(paciente);
        System.out.println("Paciente actualizado exitosamente.");
    }

    private static void deletePaciente() throws SQLException {
        System.out.print("ID de Paciente: ");
        int id = Integer.parseInt(scanner.nextLine());

        pacienteDAO.deletePaciente(id);
        System.out.println("Paciente eliminado exitosamente.");
    }

    // Métodos para gestionar Cita
    private static void addCita() throws SQLException {
        System.out.print("ID de Paciente: ");
        int idPaciente = Integer.parseInt(scanner.nextLine());
        System.out.print("ID de Médico: ");
        int idMedico = Integer.parseInt(scanner.nextLine());
        System.out.print("Fecha de la Cita (yyyy-mm-dd): ");
        Date fechaCita = Date.valueOf(scanner.nextLine());
        System.out.print("Hora de la Cita (HH:MM:SS): ");
        Time horaCita = Time.valueOf(scanner.nextLine());
        System.out.print("Motivo: ");
        String motivo = scanner.nextLine();

        Cita cita = new Cita();
        cita.setIdPaciente(idPaciente);
        cita.setIdMedico(idMedico);
        cita.setFechaCita(fechaCita);
        cita.setHoraCita(horaCita);
        cita.setMotivo(motivo);

        citaDAO.addCita(cita);
        System.out.println("Cita añadida exitosamente.");
    }

    private static void getCita() throws SQLException {
        System.out.print("ID de Cita: ");
        int id = Integer.parseInt(scanner.nextLine());

        Cita cita = citaDAO.getCitaById(id);
        if (cita != null) {
            System.out.println(cita);
        } else {
            System.out.println("Cita no encontrada.");
        }
    }

    private static void getAllCitas() throws SQLException {
        List<Cita> citas = citaDAO.getAllCitas();
        for (Cita cita : citas) {
            System.out.println(cita);
        }
    }

    private static void updateCita() throws SQLException {
        System.out.print("ID de Cita: ");
        int id = Integer.parseInt(scanner.nextLine());

        Cita cita = citaDAO.getCitaById(id);
        if (cita == null) {
            System.out.println("Cita no encontrada.");
            return;
        }

        System.out.print("Nuevo ID de Paciente (actual: " + cita.getIdPaciente() + "): ");
        int idPaciente = Integer.parseInt(scanner.nextLine());
        System.out.print("Nuevo ID de Médico (actual: " + cita.getIdMedico() + "): ");
        int idMedico = Integer.parseInt(scanner.nextLine());
        System.out.print("Nueva Fecha de la Cita (actual: " + cita.getFechaCita() + "): ");
        Date fechaCita = Date.valueOf(scanner.nextLine());
        System.out.print("Nueva Hora de la Cita (actual: " + cita.getHoraCita() + "): ");
        Time horaCita = Time.valueOf(scanner.nextLine());
        System.out.print("Nuevo Motivo (actual: " + cita.getMotivo() + "): ");
        String motivo = scanner.nextLine();

        cita.setIdPaciente(idPaciente);
        cita.setIdMedico(idMedico);
        cita.setFechaCita(fechaCita);
        cita.setHoraCita(horaCita);
        cita.setMotivo(motivo);

        citaDAO.updateCita(cita);
        System.out.println("Cita actualizada exitosamente.");
    }

    private static void deleteCita() throws SQLException {
        System.out.print("ID de Cita: ");
        int id = Integer.parseInt(scanner.nextLine());

        citaDAO.deleteCita(id);
        System.out.println("Cita eliminada exitosamente.");
    }
}
En este código, se implementa un menú interactivo en la consola para gestionar las operaciones CRUD de cada entidad del hospital (Especialidad, Medico, Paciente y Cita). Cada operación se gestiona a través de métodos específicos, y las excepciones de SQL se manejan para proporcionar retroalimentación al usuario. Esta estructura modular y clara permite una fácil adición de nuevas funcionalidades en el futuro.





                                           
