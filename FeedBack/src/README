Para abordar el desarrollo de la aplicación "Riwi Academy", aquí tienes una estructura básica dividida en varios archivos para mantener el código organizado:

1. **Modelo de Entidad-Relación (ERD):**
   Define las tablas y relaciones entre ellas.

2. **Clases del Modelo:**
   Define las clases que representan cada entidad del modelo.

3. **Controladores:**
   Contiene la lógica para gestionar las operaciones CRUD (crear, leer, actualizar, eliminar) sobre las entidades.

4. **Conexión a la Base de Datos:**
   Gestiona la conexión y desconexión a la base de datos.

5. **CRUD:**
   Implementa los métodos específicos para las operaciones CRUD.

6. **Main:**
   Ejecuta la aplicación e interactúa con el usuario.

### Modelo de Entidad-Relación (ERD)
```sql
CREATE DATABASE RiwiAcademyDB;

USE RiwiAcademyDB;

CREATE TABLE Estudiantes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    activo BOOLEAN DEFAULT TRUE,
    CHECK (email LIKE '%_@__%.__%')
);

CREATE TABLE Cursos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL UNIQUE,
    descripcion TEXT
);

CREATE TABLE Inscripciones (
    id INT AUTO_INCREMENT PRIMARY KEY,
    estudiante_id INT,
    curso_id INT,
    FOREIGN KEY (estudiante_id) REFERENCES Estudiantes(id) ON DELETE CASCADE,
    FOREIGN KEY (curso_id) REFERENCES Cursos(id) ON DELETE CASCADE,
    UNIQUE (estudiante_id, curso_id)
);

CREATE TABLE Calificaciones (
    id INT AUTO_INCREMENT PRIMARY KEY,
    inscripcion_id INT,
    calificacion FLOAT CHECK (calificacion BETWEEN 0 AND 100),
    descripcion VARCHAR(255),
    FOREIGN KEY (inscripcion_id) REFERENCES Inscripciones(id) ON DELETE CASCADE
);
```

### Clases del Modelo
**Estudiante.java**
```java
public class Estudiante {
    private int id;
    private String nombre;
    private String email;
    private boolean activo;

    // Getters y setters
}
```

**Curso.java**
```java
public class Curso {
    private int id;
    private String nombre;
    private String descripcion;

    // Getters y setters
}
```

**Inscripcion.java**
```java
public class Inscripcion {
    private int id;
    private int estudianteId;
    private int cursoId;

    // Getters y setters
}
```

**Calificacion.java**
```java
public class Calificacion {
    private int id;
    private int inscripcionId;
    private float calificacion;
    private String descripcion;

    // Getters y setters
}
```

### Controladores
**EstudianteController.java**
```java
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class EstudianteController {
    private Connection connection;

    public EstudianteController(Connection connection) {
        this.connection = connection;
    }

    public void crearEstudiante(Estudiante estudiante) throws SQLException {
        String query = "INSERT INTO Estudiantes (nombre, email, activo) VALUES (?, ?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, estudiante.getNombre());
            stmt.setString(2, estudiante.getEmail());
            stmt.setBoolean(3, estudiante.isActivo());
            stmt.executeUpdate();
        }
    }

    public List<Estudiante> listarEstudiantesActivos() throws SQLException {
        String query = "SELECT * FROM Estudiantes WHERE activo = TRUE";
        List<Estudiante> estudiantes = new ArrayList<>();
        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                Estudiante estudiante = new Estudiante();
                estudiante.setId(rs.getInt("id"));
                estudiante.setNombre(rs.getString("nombre"));
                estudiante.setEmail(rs.getString("email"));
                estudiante.setActivo(rs.getBoolean("activo"));
                estudiantes.add(estudiante);
            }
        }
        return estudiantes;
    }

    public Estudiante buscarEstudiantePorId(int id) throws SQLException {
        String query = "SELECT * FROM Estudiantes WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setInt(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    Estudiante estudiante = new Estudiante();
                    estudiante.setId(rs.getInt("id"));
                    estudiante.setNombre(rs.getString("nombre"));
                    estudiante.setEmail(rs.getString("email"));
                    estudiante.setActivo(rs.getBoolean("activo"));
                    return estudiante;
                }
            }
        }
        return null;
    }

    public void actualizarEstudiante(Estudiante estudiante) throws SQLException {
        String query = "UPDATE Estudiantes SET nombre = ?, email = ?, activo = ? WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, estudiante.getNombre());
            stmt.setString(2, estudiante.getEmail());
            stmt.setBoolean(3, estudiante.isActivo());
            stmt.setInt(4, estudiante.getId());
            stmt.executeUpdate();
        }
    }

    public void eliminarEstudiante(int id) throws SQLException {
        String query = "DELETE FROM Estudiantes WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setInt(1, id);
            stmt.executeUpdate();
        }
    }
}
```

### Conexión a la Base de Datos
**DatabaseConnection.java**
```java
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DatabaseConnection {
    private static final String URL = "jdbc:mysql://localhost:3306/RiwiAcademyDB";
    private static final String USER = "root";
    private static final String PASSWORD = "password";

    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }

    public static void closeConnection(Connection connection) throws SQLException {
        if (connection != null && !connection.isClosed()) {
            connection.close();
        }
    }
}
```

### CRUD
Los métodos CRUD se implementan en los controladores, como se muestra en el `EstudianteController`.

### Main
**Main.java**
```java
import java.sql.Connection;
import java.util.List;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        try (Connection connection = DatabaseConnection.getConnection()) {
            EstudianteController estudianteController = new EstudianteController(connection);
            Scanner scanner = new Scanner(System.in);

            while (true) {
                System.out.println("1. Crear estudiante");
                System.out.println("2. Listar estudiantes activos");
                System.out.println("3. Buscar estudiante por ID");
                System.out.println("4. Actualizar estudiante");
                System.out.println("5. Eliminar estudiante");
                System.out.println("6. Salir");
                int choice = scanner.nextInt();

                switch (choice) {
                    case 1:
                        System.out.println("Nombre:");
                        String nombre = scanner.next();
                        System.out.println("Email:");
                        String email = scanner.next();
                        Estudiante estudiante = new Estudiante();
                        estudiante.setNombre(nombre);
                        estudiante.setEmail(email);
                        estudiante.setActivo(true);
                        estudianteController.crearEstudiante(estudiante);
                        break;
                    case 2:
                        List<Estudiante> estudiantes = estudianteController.listarEstudiantesActivos();
                        for (Estudiante e : estudiantes) {
                            System.out.println(e.getId() + ": " + e.getNombre() + " - " + e.getEmail());
                        }
                        break;
                    case 3:
                        System.out.println("ID del estudiante:");
                        int id = scanner.nextInt();
                        Estudiante e = estudianteController.buscarEstudiantePorId(id);
                        if (e != null) {
                            System.out.println(e.getId() + ": " + e.getNombre() + " - " + e.getEmail());
                        } else {
                            System.out.println("Estudiante no encontrado");
                        }
                        break;
                    case 4:
                        System.out.println("ID del estudiante a actualizar:");
                        int updateId = scanner.nextInt();
                        Estudiante updateEstudiante = estudianteController.buscarEstudiantePorId(updateId);
                        if (updateEstudiante != null) {
                            System.out.println("Nuevo nombre (actual: " + updateEstudiante.getNombre() + "):");
                            String newName = scanner.next();
                            System.out.println("Nuevo email (actual: " + updateEstudiante.getEmail() + "):");
                            String newEmail = scanner.next();
                            updateEstudiante.setNombre(newName);
                            updateEstudiante.setEmail(newEmail);
                            estudianteController.actualizarEstudiante(updateEstudiante);
                        } else {
                            System.out.println("Estudiante no encontrado");
                        }
                        break;
                    case 5:
                        System.out.println("ID del estudiante a eliminar:");
                        int deleteId = scanner.nextInt();
                        estudianteController.eliminarEstudiante(deleteId);
                        break;
                    case 6:
                        return;
                    default:
                        System.out.println("Opción no válida");
                        break;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
```

Este es un esqueleto básico para la implementación de "Riwi Academy". Deberás implementar clases y controladores similares para los cursos, inscripciones y calificaciones, siguiendo el mismo patrón.
