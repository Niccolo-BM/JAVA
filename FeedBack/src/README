Para desarrollar la base de datos y la aplicación para "Riwi Academy", podemos seguir los siguientes pasos:

### 1. Diseño del Modelo Entidad-Relación (ERD)

#### Entidades:
1. **Estudiante**
   - ID (PK)
   - Nombre
   - Apellido
   - Email (único)
   - Activo (booleano, por defecto true)

2. **Curso**
   - ID (PK)
   - Nombre (único, case insensitive)
   - Descripción

3. **Inscripción**
   - ID (PK)
   - EstudianteID (FK -> Estudiante.ID, ON DELETE CASCADE)
   - CursoID (FK -> Curso.ID, ON DELETE CASCADE)

4. **Calificación**
   - ID (PK)
   - InscripciónID (FK -> Inscripción.ID, ON DELETE CASCADE)
   - Nota (0-100)
   - Descripción

### 2. Creación de la Base de Datos

#### Script SQL para MySQL:

```sql
-- Crear la base de datos
CREATE DATABASE RiwiAcademyDB;

USE RiwiAcademyDB;

-- Crear tabla Estudiante
CREATE TABLE Estudiante (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    Nombre VARCHAR(255) NOT NULL,
    Apellido VARCHAR(255) NOT NULL,
    Email VARCHAR(255) NOT NULL UNIQUE,
    Activo BOOLEAN DEFAULT TRUE,
    CHECK (Email LIKE '%_@_%._%')
);

-- Crear tabla Curso
CREATE TABLE Curso (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    Nombre VARCHAR(255) NOT NULL,
    Descripción TEXT,
    CONSTRAINT unique_curso_nombre UNIQUE (LOWER(Nombre))
);

-- Crear tabla Inscripción
CREATE TABLE Inscripción (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    EstudianteID INT,
    CursoID INT,
    FOREIGN KEY (EstudianteID) REFERENCES Estudiante(ID) ON DELETE CASCADE,
    FOREIGN KEY (CursoID) REFERENCES Curso(ID) ON DELETE CASCADE,
    UNIQUE (EstudianteID, CursoID)
);

-- Crear tabla Calificación
CREATE TABLE Calificación (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    InscripciónID INT,
    Nota INT CHECK (Nota >= 0 AND Nota <= 100),
    Descripción TEXT,
    FOREIGN KEY (InscripciónID) REFERENCES Inscripción(ID) ON DELETE CASCADE
);
```

### 3. Archivo de Credenciales

Crea un archivo `db_credentials.txt` con las siguientes credenciales (puedes ajustar según tu configuración):

```
host=localhost
port=3306
database=RiwiAcademyDB
user=tu_usuario
password=tu_contraseña
```

### 4. Desarrollo de la Aplicación en Java

#### Conexión a la Base de Datos:

```java
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DatabaseConnection {
    private static final String URL = "jdbc:mysql://localhost:3306/RiwiAcademyDB";
    private static final String USER = "tu_usuario";
    private static final String PASSWORD = "tu_contraseña";

    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }
}
```

#### Implementación del Sistema de Gestión

A continuación, algunos ejemplos de métodos en Java para gestionar las entidades.

**Crear Estudiante:**

```java
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class EstudianteDAO {

    public void crearEstudiante(String nombre, String apellido, String email) throws SQLException {
        String query = "INSERT INTO Estudiante (Nombre, Apellido, Email) VALUES (?, ?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, nombre);
            stmt.setString(2, apellido);
            stmt.setString(3, email);
            stmt.executeUpdate();
        }
    }

    // Otros métodos para editar, listar y buscar estudiantes...
}
```

**Crear Curso:**

```java
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class CursoDAO {

    public void crearCurso(String nombre, String descripcion) throws SQLException {
        String query = "INSERT INTO Curso (Nombre, Descripción) VALUES (?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, nombre);
            stmt.setString(2, descripcion);
            stmt.executeUpdate();
        }
    }

    // Otros métodos para editar, listar y eliminar cursos...
}
```

**Crear Inscripción:**

```java
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class InscripciónDAO {

    public void crearInscripción(int estudianteID, int cursoID) throws SQLException {
        String query = "INSERT INTO Inscripción (EstudianteID, CursoID) VALUES (?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, estudianteID);
            stmt.setInt(2, cursoID);
            stmt.executeUpdate();
        }
    }

    // Otros métodos para editar y eliminar inscripciones...
}
```

**Crear Calificación:**

```java
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class CalificaciónDAO {

    public void crearCalificación(int inscripciónID, int nota, String descripción) throws SQLException {
        String query = "INSERT INTO Calificación (InscripciónID, Nota, Descripción) VALUES (?, ?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, inscripciónID);
            stmt.setInt(2, nota);
            stmt.setString(3, descripción);
            stmt.executeUpdate();
        }
    }

    // Otros métodos para editar calificaciones...
}
```

Con estos pasos, tendrás la base para desarrollar "Riwi Academy". Puedes ampliar los métodos para cubrir todos los criterios de aceptación y funcionalidades requeridas en las historias de usuario.




1. Controladores

Controlador para Estudianteimport java.util.Scanner;

public class EstudianteController {
    private EstudianteDAO estudianteDAO;
    private Scanner scanner;

    public EstudianteController() {
        estudianteDAO = new EstudianteDAO();
        scanner = new Scanner(System.in);
    }

    public void crearEstudiante() {
        System.out.print("Ingrese el nombre: ");
        String nombre = scanner.nextLine();
        System.out.print("Ingrese el apellido: ");
        String apellido = scanner.nextLine();
        System.out.print("Ingrese el email: ");
        String email = scanner.nextLine();

        try {
            estudianteDAO.crearEstudiante(nombre, apellido, email);
            System.out.println("Estudiante creado exitosamente.");
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Error al crear el estudiante.");
        }
    }

    // Métodos para editar, listar y buscar estudiantes...
}Controlador para Cursoimport java.util.Scanner;

public class CursoController {
    private CursoDAO cursoDAO;
    private Scanner scanner;

    public CursoController() {
        cursoDAO = new CursoDAO();
        scanner = new Scanner(System.in);
    }

    public void crearCurso() {
        System.out.print("Ingrese el nombre del curso: ");
        String nombre = scanner.nextLine();
        System.out.print("Ingrese la descripción del curso: ");
        String descripcion = scanner.nextLine();

        try {
            cursoDAO.crearCurso(nombre, descripcion);
            System.out.println("Curso creado exitosamente.");
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Error al crear el curso.");
        }
    }

    // Métodos para editar, listar y eliminar cursos...
}Controlador para Inscripciónimport java.util.Scanner;

public class InscripciónController {
    private InscripciónDAO inscripciónDAO;
    private Scanner scanner;

    public InscripciónController() {
        inscripciónDAO = new InscripciónDAO();
        scanner = new Scanner(System.in);
    }

    public void crearInscripción() {
        System.out.print("Ingrese el ID del estudiante: ");
        int estudianteID = scanner.nextInt();
        System.out.print("Ingrese el ID del curso: ");
        int cursoID = scanner.nextInt();

        try {
            inscripciónDAO.crearInscripción(estudianteID, cursoID);
            System.out.println("Inscripción creada exitosamente.");
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Error al crear la inscripción.");
        }
    }

    // Métodos para editar y eliminar inscripciones...
}Controlador para Calificaciónimport java.util.Scanner;

public class CalificaciónController {
    private CalificaciónDAO calificaciónDAO;
    private Scanner scanner;

    public CalificaciónController() {
        calificaciónDAO = new CalificaciónDAO();
        scanner = new Scanner(System.in);
    }

    public void crearCalificación() {
        System.out.print("Ingrese el ID de la inscripción: ");
        int inscripciónID = scanner.nextInt();
        System.out.print("Ingrese la nota (0-100): ");
        int nota = scanner.nextInt();
        scanner.nextLine();  // Consumir la nueva línea
        System.out.print("Ingrese la descripción de la calificación: ");
        String descripción = scanner.nextLine();

        try {
            calificaciónDAO.crearCalificación(inscripciónID, nota, descripción);
            System.out.println("Calificación creada exitosamente.");
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Error al crear la calificación.");
        }
    }

    // Métodos para editar calificaciones...
}2. Interface para Doble Clave ForáneaPara manejar entidades con doble clave foránea, podemos usar una interfaz. Aquí un ejemplo simple.public interface IDobleClaveForanea {
    int getEstudianteID();
    int getCursoID();
}Implementamos esta interfaz en Inscripción:public class Inscripción implements IDobleClaveForanea {
    private int estudianteID;
    private int cursoID;

    // Constructor, getters y setters...

    @Override
    public int getEstudianteID() {
        return estudianteID;
    }

    @Override
    public int getCursoID() {
        return cursoID;
    }
}3. Archivo Main para Ejecutar Todoimport java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        EstudianteController estudianteController = new EstudianteController();
        CursoController cursoController = new CursoController();
        InscripciónController inscripciónController = new InscripciónController();
        CalificaciónController calificaciónController = new CalificaciónController();

        while (true) {
            System.out.println("1. Crear Estudiante");
            System.out.println("2. Crear Curso");
            System.out.println("3. Crear Inscripción");
            System.out.println("4. Crear Calificación");
            System.out.println("5. Salir");
            System.out.print("Seleccione una opción: ");
            int opcion = scanner.nextInt();
            scanner.nextLine(); // Consumir la nueva línea

            switch (opcion) {
                case 1:
                    estudianteController.crearEstudiante();
                    break;
                case 2:
                    cursoController.crearCurso();
                    break;
                case 3:
                    inscripciónController.crearInscripción();
                    break;
                case 4:
                    calificaciónController.crearCalificación();
                    break;
                case 5:
                    System.out.println("Saliendo...");
                    return;
                default:
                    System.out.println("Opción no válida. Intente nuevamente.");
            }
        }
    }
}
